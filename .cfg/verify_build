#!/bin/bash

BINARIES=()
CHECK_PATH="$(pwd)"
LOG=""

verify_binaries() {
	if [ -n "$LOG" ]; then
		BUILD_LOG="$LOG"
	fi

	for item in "${BINARIES[@]}"; do
		# Get just the binary name without the path
		local binary_name
		local full_path
		binary_name=$(basename "$item")

		# Check if the item contains a path separator
		if [[ "$item" == *"/"* ]]; then
			# If it does, use the item as is
			full_path="$item"
		else
			# If it doesn't, prepend CHECK_PATH if it's set
			full_path="${CHECK_PATH:+$CHECK_PATH/}${item}"
		fi

		if [ -f "$full_path" ]; then
			echo "  [OK] Building ${item}" | tee -a "$BUILD_LOG"

			# Compress & copy the binary to `BINARIES_DIR`, flattening the structure
			local file_out
			file_out=$(file "$full_path")
			if echo "$file_out" | grep -q "ELF"; then

				if ! echo "$file_out" | grep -q "64-bit"; then
					echo "  [FAIL] ${item} is not 64-bit" | tee -a "$BUILD_LOG"
					echo "    -> $file_out" | tee -a "$BUILD_LOG"
					return 1
				fi

				if ! echo "$file_out" | grep -q "ARM aarch64"; then
					echo "[FAIL] ${item} is not ARM aarch64" | tee -a "$BUILD_LOG"
					echo "    -> $file_out" | tee -a "$BUILD_LOG"
					return 1
				fi

				if ! echo "$file_out" | grep -q "statically linked"; then
					echo "  [FAIL] ${item} is not statically linked" | tee -a "$BUILD_LOG"
					echo "    -> $file_out" | tee -a "$BUILD_LOG"
					return 1
				fi

				if ! echo "$file_out" | grep -q "stripped"; then
					echo "  [FAIL] ${item} is not stripped" | tee -a "$BUILD_LOG"
					echo "    -> $file_out" | tee -a "$BUILD_LOG"
					return 1
				fi

				# NOTE: Sometimes production binaries are not writable, which is required by UPX
				chmod +w "$full_path"
				upx_output=$(upx --best --lzma --quiet "$full_path" 2>&1)
				upx_exit_code=$?
				if [ $upx_exit_code -eq 0 ]; then
					echo "  [OK] Packing with UPX" | tee -a "$BUILD_LOG"
				elif echo "$upx_output" | grep -q "AlreadyPackedException"; then
					echo "  [WARN] UPX detected, skipping UPX for $item" | tee -a "$BUILD_LOG"
				else
					printf "  [FAIL] UPX failed for %s $item:\n\n%s", "$item", "$upx_output" | tee -a "$BUILD_LOG"
					return 1
				fi
			fi
			cp_out=$(cp "$full_path" "${BINARIES_DIR}/${binary_name}")
			cp_exit_code=$?
			if [ $cp_exit_code -eq 0 ]; then
				echo "  [OK] Copying ${binary_name}" | tee -a "$BUILD_LOG"
			else
				echo "  [FAIL] Copying ${binary_name}" | tee -a "$BUILD_LOG"
				echo "   -> $cp_out" | tee -a "$BUILD_LOG"
			fi
		else
			echo "  [FAIL] ${item} not found in ${CHECK_PATH}" | tee -a "$BUILD_LOG"
			return 1
		fi
	done

	log "All binaries verified successfully" | tee -a "$BUILD_LOG"
	return 0
}

# Parse arguments
while (("$#")); do
	case "$1" in
	-p | --path)
		CHECK_PATH=$2
		shift 2
		;;
	-b | --binaries)
		IFS=' ' read -ra BINARIES <<<"$2"
		shift 2
		;;
	-l | --log)
		LOG=$2
		shift 2
		;;
	-h | --help)
		log "Usage: $0 [-p|--path <path>] [-b|--binaries <space-separated binaries>] [-l|--log <log file>]"
		exit 0
		;;
	-*)
		log "Error: Unknown option: $1" >&2
		exit 1
		;;
	*)
		BINARIES+=("$1")
		shift
		;;
	esac
done

if [ ${#BINARIES[@]} -eq 0 ]; then
	log "Error: No binaries specified. Use -b|--binaries option or provide them as arguments."
	exit 1
fi

log "Verifying build for: $(printf '%s ' "${BINARIES[@]}")"
verify_binaries
exit $?
